using System;
using System.Data;
using System.Linq;
using System.Windows.Forms;
using System.IO;
using System.Text.RegularExpressions;
using System.Xml;
using System.Threading.Tasks;

using XrmToolBox.Extensibility;
using Microsoft.Xrm.Sdk;
using System.Xml.Linq;
using System.Collections.Generic;
using System.Diagnostics;
using System.Threading;
using XrmToolBox.Extensibility.Args;
using System.Drawing;

namespace adesso_XTB_Plugins.DocumentTemplateExport
{

    public partial class DocumentTemplateExport : PluginControlBase
    {
        #region Variables
        Settings MySettings;
        private SettingsService _settingsService;

        #endregion

        #region Constructor/Load

        public DocumentTemplateExport()
        {
            InitializeComponent();

            _settingsService = new SettingsService();

            MySettings = _settingsService.LoadOrInitializeSettings();

            TxtDirectoryPath.Text = MySettings.LastDirectoryPath;

            SetToolTips();
            //var xmls = new XElement("root",
            //    new XElement("value",
            //    new XAttribute("Attr", 1),
            //    "test")).ToString();

            //File.WriteAllText(@"c:\foo.xml", xmls.ToString());

            //var xml2 = new XElement("root", new[] { 1, 2, 3, 4, 5 }.Select(x => new XElement("value", x))).ToString();

        }
        private void DocumentTemplateExport_Load(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(TxtDirectoryPath.Text) && Directory.Exists(TxtDirectoryPath.Text))
            {
                LoadCrmTemplatesToBindingSource(BsCrmTemplates);
            }

            SetButtonLayoutTabCrmDocumentTemplates();

            foreach (DataGridViewColumn col in DgvDocumentTemplate.Columns)
            {
                switch (col.Name)
                {
                    case "EntityTypeDatagridViewComboBox":
                    case "DescriptionDataGridViewTextBoxColumn":
                        col.ReadOnly = false;
                        break;
                    default:
                        col.ReadOnly = true;
                        break;
                }
            }

            EntityTypeDatagridViewComboBox.ReadOnly = false;
            EntityTypeDatagridViewComboBox.Items.Add("documenttemplate");
            EntityTypeDatagridViewComboBox.Items.Add("personaldocumenttemplate");

        }

        #endregion

        #region TxtDirectoryPath

        private void TxtDirectoryPath_TextChanged(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(TxtDirectoryPath.Text) && Directory.Exists(TxtDirectoryPath.Text))
            {
                if (!string.Equals(MySettings.LastDirectoryPath, TxtDirectoryPath.Text))
                {
                    MySettings.LastDirectoryPath = TxtDirectoryPath.Text;
                    _settingsService.Save(MySettings);
                }
            }
        }

        private void TxtDirectoryPath_Leave(object sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(TxtDirectoryPath.Text) || !Directory.Exists(TxtDirectoryPath.Text))
            {
                ShowErrorNote(MySettings.DirectoryErrorText);
            }
        }

        #endregion

        #region BtnDirectoryFolderDialog

        private void BtnDirectoryFolderDialog_Click(object sender, EventArgs e)
        {
            ShowFilePathSelectionDialog();
        }

        #endregion

        #region TabCtrlDocumentTemplate

        private void TabCtrlDocumentTemplate_Selecting(object sender, TabControlCancelEventArgs e)
        {
            if (e.TabPage.Name == TabCrmDocumentTemplates.Name)
            {
                SetButtonLayoutTabCrmDocumentTemplates();
            }

            if (e.TabPage.Name == TabDocumentTemplate.Name)
            {
                if (string.IsNullOrEmpty(TxtDirectoryPath.Text))
                {
                    ShowErrorNote(MySettings.DirectoryErrorText);
                    TabCtrlDocumentTemplate.SelectTab(TabCrmDocumentTemplates);
                }
                else
                {
                    SetButtonLayoutTabDocumentTemplate();
                }
            }
        }

        #endregion

        #region File Path Methods

        private void ShowFilePathSelectionDialog()
        {
            FbdDirectory.RootFolder = Environment.SpecialFolder.MyComputer;
            FbdDirectory.SelectedPath = TxtDirectoryPath.Text;
            DialogResult result = FbdDirectory.ShowDialog();
            if (result == DialogResult.OK)
            {
                TxtDirectoryPath.Text = FbdDirectory.SelectedPath + "\\";
            }
        }

        private void OpenFilePathFolder()
        {
            if (!string.IsNullOrEmpty(TxtDirectoryPath.Text) && Directory.Exists(TxtDirectoryPath.Text))
            {
                Process.Start(TxtDirectoryPath.Text);
            }
            else // txtDirectoryPath.Text == null or empty && directory doesn't exists
            {
                ShowErrorNote(MySettings.DirectoryErrorText);
            }
        }

        private void SaveFilesToDisk(List<DocumentTemplateModel> retrievedTemplates)
        {
            if (!string.IsNullOrEmpty(TxtDirectoryPath.Text) && Directory.Exists(TxtDirectoryPath.Text))
            {
                foreach (var t in retrievedTemplates)
                {
                    File.WriteAllBytes(t.FilePath, Convert.FromBase64String(t.Content));
                }
            }
            else // txtDirectoryPath.Text == null or empty && directory exists
            {
                ShowInfoNote(MySettings.DirectoryErrorText);
                TxtDirectoryPath.Focus();
            }
        }

        private void SaveFilesToDisk(DocumentTemplateModel template)
        {
            if (!string.IsNullOrEmpty(TxtDirectoryPath.Text) && Directory.Exists(TxtDirectoryPath.Text))
            {
                File.WriteAllBytes(template.FilePath, Convert.FromBase64String(template.Content));
            }
            else // txtDirectoryPath.Text == null or empty && directory exists
            {
                ShowInfoNote(MySettings.DirectoryErrorText);
                TxtDirectoryPath.Focus();
            }
        }
        #endregion

        #region Document Template Methods


        private void FillBindingSourceWithTemplates(BindingSource bindingSrc, IEnumerable<DocumentTemplateModel> templateList)
        {
            foreach (var t in templateList)
            {
                bindingSrc.Add(t);
            }
        }

        private void LoadCrmTemplatesToBindingSource(BindingSource bs)
        {
            bs.Clear();

            var crmService = new DocumentTemplateService(Service, new SettingsService());
            var documents = crmService.QueryDocuments();



            var templateList = documents.General;
            TsprgbLoadUpdate.Value = 48;


            FillBindingSourceWithTemplates(bs, documents.General);
            TsprgbLoadUpdate.Value = 64;
            TsprgbLoadUpdate.Value = 80;
            
            FillBindingSourceWithTemplates(bs, documents.Personal);
            TsprgbLoadUpdate.Value = 100;

            ResetProgressBar(3500);
        }

        private void UpdateFile(DocumentTemplateModel t)
        {
            string importFile = Convert.ToBase64String(File.ReadAllBytes(t.FilePath));

            var template = new Entity(t.EntityType);

            template.Id = t.Id;
            template["content"] = importFile;
            template["description"] = t.Description;

            Service.Update(template);
        }

        private void CreateFile(DocumentTemplateModel t)
        {
            string importFile = Convert.ToBase64String(File.ReadAllBytes(t.FilePath));

            var doctype = new OptionSetValue();
            switch (t.DocumentType)
            {
                case ".xlsx":
                    doctype.Value = 1;
                    break;
                case ".docx":
                    doctype.Value = 2;
                    break;
            }

            var template = new Entity(t.EntityType);

            if (t.Id != Guid.Empty)
            {
                template.Id = t.Id;
            }

            template["content"] = importFile;
            template["name"] = t.Name;
            template["documenttype"] = doctype;
            template["description"] = t.Description;

            Service.Create(template);
        }

        public bool CheckDoesGridviewContainGuid(DataGridView dgv, string searchField, Guid id)
        {
            var result = false;
            if (id != Guid.Empty)
            {
                foreach (DataGridViewRow row in dgv.Rows)
                {
                    var idFromRow = new Guid(row.Cells[searchField].Value.ToString());
                    if (idFromRow == id)
                    {
                        result = true;
                        break;
                    }
                }
            }
            return result;
        }

        public bool CheckIsEntityTypeEmpty(DataGridView dgv)
        {
            var result = false;

            foreach (DataGridViewRow row in dgv.SelectedRows)
            {
                if (string.IsNullOrEmpty(row.Cells["EntityTypeDatagridViewComboBox"].Value.ToString()))
                {
                    result = true;
                    ColorAllCellsFromRow(row, Color.OrangeRed);
                    dgv.ClearSelection();
                }
            }
            return result;
        }

        private void AddNewTemplatesToBindingSourceFromFiles(BindingSource bs, string[] files)
        {
            for (int i = 0; i < files.Length; i++)
            {
                var fileInfo = new FileInfo(files[i]);

                string regexp = @"[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}";
                var id = Guid.Empty;

                if (Regex.IsMatch(files[i], regexp))
                {
                    id = new Guid(Regex.Match(files[i], regexp).Value);
                }
                if (!CheckDoesGridviewContainGuid(DgvDocumentTemplate, "idDataGridViewTextBoxColumn", id))
                {
                    var entityType = string.Empty;

                    if (files[i].Contains(MySettings.PrefixDocumentTemplate))
                    {
                        entityType = "documenttemplate";
                    }
                    if (files[i].Contains(MySettings.PrefixPersonalDocumentTemplate))
                    {
                        entityType = "personaldocumenttemplate";
                    }

                    var template = new DocumentTemplateModel
                    {
                        Id = id,
                        DocumentType = fileInfo.Extension,
                        Name = fileInfo.Name.Replace(fileInfo.Extension, string.Empty),
                        FilePath = files[i],
                        EntityType = entityType,
                        CreatedNew = true
                    };

                    bs.Add(template);
                }
                else //Datagridview already contains the given id
                {
                    MessageBox.Show("Duplicate detected! A dataset with the given id " + id.ToString() + " was already added to this list!");
                }
            }
        }

        private List<string> OpenDgvDocumentTemplateSelectedFile(DataGridViewSelectedRowCollection selectedRows)
        {
            var errorList = new List<string>();

            foreach (DataGridViewRow row in selectedRows)
            {
                var current = (DocumentTemplateModel)row.DataBoundItem;
                if (File.Exists(current.FilePath))
                {
                    Process.Start(current.FilePath);
                }
                else
                {
                    errorList.Add(current.FilePath);
                }
            }

            return errorList;
        }

        private void CopySelectedTemplate(DataGridViewRow selectedRow, BindingSource bs)
        {
            var current = (DocumentTemplateModel)selectedRow.DataBoundItem;
            var newTemplate = new DocumentTemplateModel
            {
                Content = string.Empty,
                Description = current.Description,
                DocumentType = current.DocumentType,
                Prefix = current.Prefix,
                Id = Guid.Empty,
                ModifiedBy = string.Empty,
                Name = current.Name + "_Copy",
                EntityType = string.Empty,
                CreatedNew = true
            };
            newTemplate.FilePath = Path.Combine(TxtDirectoryPath.Text, newTemplate.GetFileName());

            File.Copy(current.FilePath, newTemplate.FilePath);
            bs.Add(newTemplate);
        }

        #endregion

        #region DataGridView

        private void DgvDocumentTemplate_CellDoubleClick(object sender, DataGridViewCellEventArgs e)
        {
            OpenDgvDocumentTemplateSelectedFile(DgvDocumentTemplate.SelectedRows);
        }

        private void DgvDocumentTemplate_DragEnter(object sender, DragEventArgs e)
        {
            if (e.Data.GetDataPresent(DataFormats.FileDrop))
            {
                string[] files = (string[])e.Data.GetData(DataFormats.FileDrop);
                var allowDrop = true;

                for (int i = 0; i < files.Length; i++)
                {
                    var fileInfo = new FileInfo(files[i]);

                    if (fileInfo.Extension != ".xlsx" && fileInfo.Extension != ".docx")
                    {
                        allowDrop = false;
                        break;
                    }
                }

                if (allowDrop)
                {
                    e.Effect = DragDropEffects.Move;
                }
                else
                {
                    e.Effect = DragDropEffects.None;
                    ShowErrorNote(@"Only documents of the type '.xlsx' and '.docx' are allowed!");
                }
            }
            else
            {
                e.Effect = DragDropEffects.None;
            }
        }

        private void DgvDocumentTemplate_DragDrop(object sender, DragEventArgs e)
        {
            if (e.Data.GetDataPresent(DataFormats.FileDrop))
            {
                string[] files = (string[])e.Data.GetData(DataFormats.FileDrop);

                AddNewTemplatesToBindingSourceFromFiles(BsDocumentTemplateObject, files);

                DgvDocumentTemplate.ClearSelection();
            }
        }

        private void DgvDocumentTemplate_RowsAdded(object sender, DataGridViewRowsAddedEventArgs e)
        {
            var row = DgvDocumentTemplate.Rows[e.RowIndex];

            if (!string.IsNullOrEmpty(row.Cells["EntityTypeDatagridViewComboBox"].Value.ToString()))
            {
                row.Cells["EntityTypeDatagridViewComboBox"].ReadOnly = true;
            }
            else
            {
                row.Cells["EntityTypeDatagridViewComboBox"].ReadOnly = false;
                ColorAllCellsFromRow(row, Color.Yellow);
                ShowInfoNote("Please select 'Entity Type' for the highlighted datasets!");
            }

            if (string.IsNullOrEmpty(row.Cells["NameDataGridViewTextBoxColumn"].Value.ToString()))
            {
                ColorAllCellsFromRow(row, Color.Yellow);
                row.Cells["NameDataGridViewTextBoxColumn"].ReadOnly = false;
                ShowInfoNote("Please fill in the name field for each highlighted dataset!");
            }
        }

        private void DgvDocumentTemplate_CellValueChanged(object sender, DataGridViewCellEventArgs e)
        {
            if (e.RowIndex >= 0)
            {
                var row = DgvDocumentTemplate.Rows[e.RowIndex];

                if (!string.IsNullOrEmpty(row.Cells["EntityTypeDatagridViewComboBox"].Value.ToString()))
                {
                    switch (row.Cells["EntityTypeDatagridViewComboBox"].Value.ToString())
                    {
                        case "documenttemplate":
                            ((DocumentTemplateModel)row.DataBoundItem).Prefix = MySettings.PrefixDocumentTemplate;
                            break;
                        case "personaldocumenttemplate":
                            ((DocumentTemplateModel)row.DataBoundItem).Prefix = MySettings.PrefixPersonalDocumentTemplate;
                            break;
                    }

                    row.Cells["EntityTypeDatagridViewComboBox"].ReadOnly = true;
                    ColorAllCellsFromRow(row, Color.White);
                }

                // TODO
                //if (!string.IsNullOrEmpty(row.Cells["NameDataGridViewTextBoxColumn"].Value.ToString()))
                //{
                //    var current = (DocumentTemplateObject)row.DataBoundItem;
                //    current.FilePath = Path.Combine(TxtDirectoryPath.Text, current.GetFileName());
                //    SaveFilesToDisk(current);
                //    ColorAllCellsFromRow(row, Color.White);
                //}
            }
        }

        private void DgvCrmDocumentTemplates_MouseDown(object sender, MouseEventArgs e)
        {
            var ht = DgvCrmDocumentTemplates.HitTest(e.X, e.Y);

            if (ht.Type == DataGridViewHitTestType.None)
            {
                DgvCrmDocumentTemplates.ClearSelection();
            }

        }

        private void DgvDocumentTemplate_MouseDown(object sender, MouseEventArgs e)
        {
            var ht = DgvDocumentTemplate.HitTest(e.X, e.Y);

            if (ht.Type == DataGridViewHitTestType.None)
            {
                DgvDocumentTemplate.ClearSelection();
            }
        }

        #endregion

        #region Form Layout

        private void SetToolTips()
        {
            TtBtnDirectoryFolderDialog.SetToolTip(BtnDirectoryFolderDialog, "Select the target directory");
            TtBtnDirectoryFolderDialog.ShowAlways = true;

            TsbtnLoadTemplates.ToolTipText = "Retrieve all Document Templates from the specified CRM organization";

            TsbtnSaveTemplates.ToolTipText = "Saves all selected Document Templates to the specified file path";

            TsbtnUpdateTemplates.ToolTipText = "Update all selected Document Templates from the specified CRM organization";

            TtBtnOpenDirectory.ShowAlways = true;

            var ttTabCtrlDocumentTemplateText = @"DoubleClick a row in order to open the Document Template with the system default application";
            TtTabCtrlDocumentTemplate.SetToolTip(TabCtrlDocumentTemplate, ttTabCtrlDocumentTemplateText);
            TtTabCtrlDocumentTemplate.SetToolTip(TabDocumentTemplate, ttTabCtrlDocumentTemplateText);
            TtTabCtrlDocumentTemplate.SetToolTip(TabCrmDocumentTemplates, ttTabCtrlDocumentTemplateText);
            TtTabCtrlDocumentTemplate.ShowAlways = true;
        }

        private void SetButtonLayoutTabCrmDocumentTemplates()
        {
            TsbtnLoadTemplates.Enabled = true;
            TsbtnSaveTemplates.Enabled = true;

            TsbtnUpdateTemplates.Enabled = false;
            TsbtnRemoveDgvSelectedItems.Enabled = false;
            TsbtnAddTemplates.Enabled = false;
            TsbtnEditTemplate.Enabled = false;
            TsbtnCopyTemplate.Enabled = false;
            TxtDirectoryPath.Enabled = false;
            BtnDirectoryFolderDialog.Enabled = false;
            TxtDirectoryPath.Enabled = true;
            BtnDirectoryFolderDialog.Enabled = true;
        }

        private void SetButtonLayoutTabDocumentTemplate()
        {
            TsbtnLoadTemplates.Enabled = false;
            TsbtnSaveTemplates.Enabled = false;

            TsbtnUpdateTemplates.Enabled = true;
            TsbtnRemoveDgvSelectedItems.Enabled = true;
            TsbtnAddTemplates.Enabled = true;
            TsbtnEditTemplate.Enabled = true;
            TsbtnCopyTemplate.Enabled = true;
            TxtDirectoryPath.Enabled = false;
            BtnDirectoryFolderDialog.Enabled = false;
        }

        public void ColorAllCellsFromRow(DataGridViewRow row, Color myColor)
        {
            foreach (DataGridViewCell cell in row.Cells)
            {
                cell.Style.BackColor = myColor;
            }
        }

        #endregion

        #region Messages

        private void ShowInfoNote(string message)
        {
            ShowInfoNotification(message, new Uri(MySettings.NotificationUriAddress));
            Task.Factory.StartNew(() =>
            {
                Thread.Sleep(3500);
                HideNotification();
            });
        }

        private void ShowErrorNote(string message)
        {
            ShowErrorNotification(message, new Uri(MySettings.NotificationUriAddress));
            Task.Factory.StartNew(() =>
            {
                Thread.Sleep(5000);
                HideNotification();
            });
        }

        private void ResetProgressBar(int sleepTime)
        {
            Task.Factory.StartNew(() =>
            {
                Thread.Sleep(sleepTime);
                TsprgbLoadUpdate.Value = 0;
            });
        }

        #endregion

        #region Toolstrip Buttons

        private void TsbtnClose_Click(object sender, EventArgs e)
        {
            CloseTool();
        }

        private void TsbtnLoadTemplates_Click(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(TxtDirectoryPath.Text) && Directory.Exists(TxtDirectoryPath.Text))
            {

                LoadCrmTemplatesToBindingSource(BsCrmTemplates);
                ShowInfoNote("Loading completed!");
            }
            else
            {
                ShowErrorNote(MySettings.DirectoryErrorText);
                TxtDirectoryPath.Focus();
            }
        }

        private void TsbtnSaveTemplates_Click(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(TxtDirectoryPath.Text) && Directory.Exists(TxtDirectoryPath.Text))
            {
                if (DgvCrmDocumentTemplates.SelectedRows.Count > 0)
                {
                    var stepSize = Convert.ToInt32((100 / DgvCrmDocumentTemplates.SelectedRows.Count));
                    TsprgbLoadUpdate.Value = 0;

                    BsDocumentTemplateObject.Clear();
                    var selectedRows = DgvCrmDocumentTemplates.SelectedRows;
                    var list = new List<DocumentTemplateModel>();

                    for (int i = selectedRows.Count - 1; i >= 0; i--)
                    {
                        var template = (DocumentTemplateModel)DgvCrmDocumentTemplates.SelectedRows[i].DataBoundItem;
                        list.Add(template);
                        BsDocumentTemplateObject.Add(template);
                        TsprgbLoadUpdate.Value += stepSize;
                    }

                    SaveFilesToDisk(list);
                    TsprgbLoadUpdate.Value = TsprgbLoadUpdate.Maximum;
                    ResetProgressBar(3500);

                    TabCtrlDocumentTemplate.SelectTab(TabDocumentTemplate);
                    ShowInfoNote("Save complete!");

                    foreach (DataGridViewRow row in DgvDocumentTemplate.Rows)
                    {
                        if (row.Cells["EntityTypeDatagridViewComboBox"].Value != null)
                        {
                            row.Cells["EntityTypeDatagridViewComboBox"].ReadOnly = true;
                        }
                        else
                        {
                            row.Cells["EntityTypeDatagridViewComboBox"].ReadOnly = false;
                        }
                    }
                }
                else // SelectedRowCount = 0
                {
                    ShowInfoNote("No templates selected!");
                }
            }
            else // txtDirectoryPath.Text == null or empty && directory exists
            {
                ShowErrorNote(MySettings.DirectoryErrorText);
                TxtDirectoryPath.Focus();
            }
        }

        private void TsbtnUpdateTemplates_Click(object sender, EventArgs e)
        {
            if (DgvDocumentTemplate.SelectedRows.Count > 0)
            {
                if (!string.IsNullOrEmpty(TxtDirectoryPath.Text) && Directory.Exists(TxtDirectoryPath.Text))
                {
                    if (!CheckIsEntityTypeEmpty(DgvDocumentTemplate))
                    {
                        var dialog = new ConfirmImportDialog();
                        DialogResult result = dialog.ShowDialog();

                        if (result == DialogResult.OK)
                        {
                            var stepSize = Convert.ToInt32((100 / DgvDocumentTemplate.SelectedRows.Count));
                            TsprgbLoadUpdate.Value = 0;

                            var selectedRows = DgvDocumentTemplate.SelectedRows;
                            var errors = new List<string>();

                            for (int i = 0; i < selectedRows.Count; i++)
                            {
                                var template = (DocumentTemplateModel)DgvDocumentTemplate.SelectedRows[i].DataBoundItem;

                                if (File.Exists(template.FilePath))
                                {
                                    if (template.CreatedNew)
                                    {
                                        CreateFile(template);
                                    }
                                    else // Template already exists
                                    {
                                        UpdateFile(template);
                                    }

                                    TsprgbLoadUpdate.Value += stepSize;
                                }
                                else // FilePath does not exist
                                {
                                    errors.Add(template.FilePath);
                                }
                            }

                            TsprgbLoadUpdate.Value = TsprgbLoadUpdate.Maximum;
                            ShowInfoNote("Update complete!");
                            ResetProgressBar(3500);

                            //tabCtrlDocumentTemplate.SelectTab(tabCrmDocumentTemplates);
                            LoadCrmTemplatesToBindingSource(BsCrmTemplates);

                            if (errors.Count > 0)
                            {
                                var message = "The Following files could not be found:\n\n";
                                foreach (var s in errors)
                                {
                                    message += s + "\n\n";
                                }
                                MessageBox.Show(message);
                            }
                        }
                    }
                    else //EntityType is empty
                    {
                        ShowErrorNote("The field 'Entity Type' must not be empty!");
                    }
                }
            }
            else // No rows selected
            {
                ShowInfoNote("No templates selected!");
            }
        }

        private void TsbtnRemoveDgvSelectedItems_Click(object sender, EventArgs e)
        {
            if (DgvDocumentTemplate.SelectedRows.Count > 0)
            {
                foreach (DataGridViewRow row in DgvDocumentTemplate.SelectedRows)
                {
                    BsDocumentTemplateObject.Remove(row.DataBoundItem);
                }
            }
            else // No rows selected
            {
                ShowInfoNote("No templates selected!");
            }
        }

        private void TsbtnAddTemplates_Click(object sender, EventArgs e)
        {
            OfdAddTemplates.InitialDirectory = TxtDirectoryPath.Text;
            OfdAddTemplates.Filter = "Office Files (*.xlsx; *.docx)|*.xlsx; *.docx";

            DialogResult result = OfdAddTemplates.ShowDialog();
            if (result == DialogResult.OK)
            {
                var files = OfdAddTemplates.FileNames;

                AddNewTemplatesToBindingSourceFromFiles(BsDocumentTemplateObject, files);
            }

            DgvDocumentTemplate.ClearSelection();
        }

        private void TsbtnEditTemplate_Click(object sender, EventArgs e)
        {
            if (DgvDocumentTemplate.SelectedRows.Count > 0)
            {
                var errors = OpenDgvDocumentTemplateSelectedFile(DgvDocumentTemplate.SelectedRows);

                if (errors.Count > 0)
                {
                    var message = "The Following files could not be found:\n\n";
                    foreach (var s in errors)
                    {
                        message += s + "\n\n";
                    }
                    MessageBox.Show(message);
                }
            }
            else
            {
                ShowInfoNote("No template selected!");
            }
        }

        private void TsbtnOpenFilePathFolder_Click(object sender, EventArgs e)
        {
            OpenFilePathFolder();
        }


        private void TsbtnCopyTemplate_Click(object sender, EventArgs e)
        {
            if (DgvDocumentTemplate.SelectedRows.Count == 1)
            {
                foreach (DataGridViewRow row in DgvDocumentTemplate.SelectedRows)
                {
                    CopySelectedTemplate(row, BsDocumentTemplateObject);
                }
            }
            else
            {
                ShowInfoNote("1 template must be selected to perform this action!");
            }
        }
        #endregion
    }
}

//private void BtnExport_Click(object sender, EventArgs e)
//{
//    if (!string.IsNullOrEmpty(txtDirectoryPath.Text) && Directory.Exists(txtDirectoryPath.Text))
//    {
//        BsDocumentTemplateObject.Clear();
//        BsPersonalDocumentTemplateObject.Clear();

//        var retrievedDT = new EntityCollection();
//        var retrievedPDT = new EntityCollection();

//        //WorkAsync(new WorkAsyncInfo
//        //{
//        //    Message = "Exporting Document Templates to the selected directory",
//        //    Work = (worker, eArgs) =>
//        //    {
//        //        retrievedDT = RetrieveDocumentTemplates();
//        //        retrievedPDT = RetrievePersonalDocumentTemplates();

//        //        //var watcher = new FileSystemWatcher(txtDirectoryPath.Text);
//        //        //watcher.NotifyFilter = NotifyFilters.LastAccess | NotifyFilters.LastWrite
//        //        //                       | NotifyFilters.FileName | NotifyFilters.DirectoryName;
//        //        //watcher.Filter = "*.*";
//        //        //watcher.Changed += new FileSystemEventHandler(OnChanged);
//        //        //watcher.EnableRaisingEvents = true;

//        //    },
//        //    AsyncArgument = null,
//        //    IsCancelable = false,
//        //    MessageWidth = 340,
//        //    MessageHeight = 150
//        //});

//        retrievedDT = RetrieveDocumentTemplates(false);
//        pgrbExportImport.Value = 12;

//        retrievedPDT = RetrieveDocumentTemplates(true);
//        pgrbExportImport.Value = 24;

//        var templateList = GetDTObjectsListFromEntityCollection(retrievedDT);
//        pgrbExportImport.Value = 36;

//        FillBindingSourceWithTemplates(BsDocumentTemplateObject, templateList);
//        pgrbExportImport.Value = 48;

//        SaveFilesToDisk(templateList);
//        pgrbExportImport.Value = 60;

//        templateList = GetDTObjectsListFromEntityCollection(retrievedPDT);
//        pgrbExportImport.Value = 72;

//        FillBindingSourceWithTemplates(BsPersonalDocumentTemplateObject, templateList);
//        pgrbExportImport.Value = 84;

//        SaveFilesToDisk(templateList);
//        pgrbExportImport.Value = 100;

//        retrievedDT = null;
//        retrievedPDT = null;
//        templateList = null;

//        ShowInfoNote("Export finished!");

//        Task.Factory.StartNew(() =>
//        {
//            Thread.Sleep(3500);
//            pgrbExportImport.Value = 0;
//        });

//    }
//    else // txtDirectoryPath.Text == null or empty && directory exists
//    {
//        ShowErrorNote(MySettings.DirectoryErrorText);
//    }
//}

//private void BtnImport_Click(object sender, EventArgs e)
//{
//    if (!string.IsNullOrEmpty(txtDirectoryPath.Text) && Directory.Exists(txtDirectoryPath.Text))
//    {
//        var dialog = new ConfirmImportDialog();
//        DialogResult result = dialog.ShowDialog();

//        if (result == DialogResult.OK)
//        {
//            if (ImportFiles())
//            {
//                ShowInfoNote("Import finished!");
//                Task.Factory.StartNew(() =>
//                {
//                    Thread.Sleep(3500);
//                    pgrbExportImport.Value = 0;
//                });
//            }
//        }
//    }
//    else // txtDirectoryPath.Text == null or empty && directory exists
//    {
//        ShowErrorNote(MySettings.DirectoryErrorText);
//    }
//}